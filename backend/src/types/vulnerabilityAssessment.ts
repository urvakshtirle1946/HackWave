export interface TransportationMetrics {
  onTimePercentage: number;
  dwellTimeHours: number;
  costPerUnit: number;
  congestionLevel: number;
  fuelEfficiency: number;
  carrierReliability: number;
}

export interface RiskScore {
  overall: number; // 0-100
  status: 'green' | 'amber' | 'red';
  breakdown: {
    operational: number;
    geopolitical: number;
    weather: number;
    economic: number;
    infrastructure: number;
  };
}

export interface LaneData {
  id: string;
  origin: string;
  destination: string;
  mode: 'sea' | 'air' | 'road' | 'rail';
  carrier: string;
  metrics: TransportationMetrics;
  riskScore: RiskScore;
  lastUpdated: string;
}

export interface DisruptionScenario {
  id: string;
  name: string;
  type: 'port_closure' | 'carrier_strike' | 'fuel_spike' | 'weather_event' | 'border_delay';
  severity: 'low' | 'medium' | 'high' | 'critical';
  affectedLanes: string[];
  impact: {
    delayHours: number;
    costIncrease: number;
    reliabilityDecrease: number;
  };
  duration: number; // hours
}

export interface Recommendation {
  id: string;
  laneId: string;
  type: 'reroute' | 'carrier_switch' | 'expedite' | 'buffer_stock';
  description: string;
  impact: {
    riskReduction: number;
    costChange: number;
    timeChange: number;
  };
  priority: 'low' | 'medium' | 'high' | 'critical';
  implementationTime: number; // hours
}

export interface VulnerabilityAssessment {
  timestamp: string;
  lanes: LaneData[];
  activeDisruptions: DisruptionScenario[];
  recommendations: Recommendation[];
  summary: {
    totalLanes: number;
    highRiskLanes: number;
    activeDisruptions: number;
    averageRiskScore: number;
  };
}

export interface ScenarioRequest {
  scenarioType: string;
  severity: string;
  affectedLanes?: string[];
  duration?: number;
}

export interface ScenarioResponse {
  success: boolean;
  scenario: DisruptionScenario;
  updatedLanes: LaneData[];
  newRecommendations: Recommendation[];
}
