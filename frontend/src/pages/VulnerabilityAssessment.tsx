import React, { useState, useEffect, useCallback } from 'react';
import type {
  VulnerabilityAssessment as VulnerabilityAssessmentType,
  LaneData,
  DisruptionScenario,
  Recommendation,
  ScenarioRequest
} from '../types/vulnerabilityAssessment';
import '../styles/VulnerabilityAssessment.css';

const VulnerabilityAssessment: React.FC = () => {
  const [assessment, setAssessment] = useState<VulnerabilityAssessmentType | null>(null);
  const [loading, setLoading] = useState(true);
  const [selectedLane, setSelectedLane] = useState<LaneData | null>(null);
  const [showScenarioPanel, setShowScenarioPanel] = useState(false);
  const [scenarioForm, setScenarioForm] = useState<ScenarioRequest>({
    scenarioType: 'port_closure',
    severity: 'medium'
  });
  const [lastUpdated, setLastUpdated] = useState<string>('');

  // Fetch vulnerability assessment data
  const fetchAssessment = useCallback(async () => {
    try {
      const response = await fetch('/api/vulnerability-assessment/assessment');
      const data = await response.json();
      if (data.success) {
        setAssessment(data.data);
        setLastUpdated(new Date().toLocaleTimeString());
      }
    } catch (error) {
      console.error('Failed to fetch assessment:', error);
    } finally {
      setLoading(false);
    }
  }, []);

  // Fetch real-time updates
  const fetchRealTimeUpdates = useCallback(async () => {
    try {
      const response = await fetch('/api/vulnerability-assessment/realtime');
      const data = await response.json();
      if (data.success) {
        setAssessment(data.data);
        setLastUpdated(new Date().toLocaleTimeString());
      }
    } catch (error) {
      console.error('Failed to fetch real-time updates:', error);
    }
  }, []);

  // Apply disruption scenario
  const applyScenario = async () => {
    try {
      const response = await fetch('/api/vulnerability-assessment/scenarios/apply', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(scenarioForm)
      });
      const data = await response.json();
      if (data.success) {
        setAssessment(data.data.updatedAssessment);
        setShowScenarioPanel(false);
        setScenarioForm({ scenarioType: 'port_closure', severity: 'medium' });
      }
    } catch (error) {
      console.error('Failed to apply scenario:', error);
    }
  };

  // Clear disruption scenario
  const clearDisruption = async (scenarioId: string) => {
    try {
      const response = await fetch(`/api/vulnerability-assessment/scenarios/${scenarioId}`, {
        method: 'DELETE'
      });
      const data = await response.json();
      if (data.success) {
        setAssessment(data.data.updatedAssessment);
      }
    } catch (error) {
      console.error('Failed to clear disruption:', error);
    }
  };

  // Set up real-time updates
  useEffect(() => {
    fetchAssessment();

    // Set up interval for real-time updates
    const interval = setInterval(fetchRealTimeUpdates, 30000); // Update every 30 seconds

    return () => clearInterval(interval);
  }, [fetchAssessment, fetchRealTimeUpdates]);

  if (loading) {
    return (
      <div className="vulnerability-assessment">
        <div className="loading">Loading vulnerability assessment...</div>
      </div>
    );
  }

  if (!assessment) {
    return (
      <div className="vulnerability-assessment">
        <div className="error">Failed to load vulnerability assessment</div>
      </div>
    );
  }

  const getRiskColor = (status: string) => {
    switch (status) {
      case 'green': return '#10b981';
      case 'amber': return '#f59e0b';
      case 'red': return '#ef4444';
      default: return '#6b7280';
    }
  };

  const getModeIcon = (mode: string) => {
    switch (mode) {
      case 'sea': return 'üö¢';
      case 'air': return '‚úàÔ∏è';
      case 'road': return 'üöõ';
      case 'rail': return 'üöÇ';
      default: return 'üì¶';
    }
  };

  return (
    <div className="vulnerability-assessment">
      {/* Header */}
      <div className="vulnerability-header">
        <h1>Supply Chain Vulnerability Assessment</h1>
        <div className="header-stats">
          <div className="stat-card">
            <span className="stat-label">Total Lanes</span>
            <span className="stat-value">{assessment.summary.totalLanes}</span>
          </div>
          <div className="stat-card">
            <span className="stat-label">High Risk</span>
            <span className="stat-value high-risk">{assessment.summary.highRiskLanes}</span>
          </div>
          <div className="stat-card">
            <span className="stat-label">Active Disruptions</span>
            <span className="stat-value">{assessment.summary.activeDisruptions}</span>
          </div>
          <div className="stat-card">
            <span className="stat-label">Avg Risk Score</span>
            <span className="stat-value">{assessment.summary.averageRiskScore}</span>
          </div>
        </div>
        <div className="last-updated">
          Last updated: {lastUpdated}
        </div>
      </div>

      {/* Main Content */}
      <div className="vulnerability-content">
        {/* Left Panel - Lanes Table */}
        <div className="lanes-panel">
          <div className="panel-header">
            <h2>Transportation Lanes</h2>
            <button
              className="scenario-btn"
              onClick={() => setShowScenarioPanel(true)}
            >
              Test Scenarios
            </button>
          </div>

          <div className="lanes-table">
            <table>
              <thead>
                <tr>
                  <th>Route</th>
                  <th>Mode</th>
                  <th>Carrier</th>
                  <th>On-Time %</th>
                  <th>Dwell Time</th>
                  <th>Cost</th>
                  <th>Risk Score</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                {assessment.lanes.map((lane) => (
                  <tr
                    key={lane.id}
                    className={selectedLane?.id === lane.id ? 'selected' : ''}
                    onClick={() => setSelectedLane(lane)}
                  >
                    <td>
                      <div className="route-info">
                        <div className="route-origin">{lane.origin}</div>
                        <div className="route-arrow">‚Üí</div>
                        <div className="route-destination">{lane.destination}</div>
                      </div>
                    </td>
                    <td>
                      <span className="mode-icon">{getModeIcon(lane.mode)}</span>
                      <span className="mode-text">{lane.mode.toUpperCase()}</span>
                    </td>
                    <td>{lane.carrier}</td>
                    <td>
                      <div className="metric-bar">
                        <div
                          className="metric-fill"
                          style={{
                            width: `${lane.metrics.onTimePercentage}%`,
                            backgroundColor: lane.metrics.onTimePercentage > 80 ? '#10b981' :
                              lane.metrics.onTimePercentage > 60 ? '#f59e0b' : '#ef4444'
                          }}
                        />
                        <span>{lane.metrics.onTimePercentage}%</span>
                      </div>
                    </td>
                    <td>{lane.metrics.dwellTimeHours}h</td>
                    <td>${lane.metrics.costPerUnit}</td>
                    <td>
                      <div className="risk-score">
                        <span className="score-number">{lane.riskScore.overall}</span>
                      </div>
                    </td>
                    <td>
                      <div
                        className="risk-status"
                        style={{ backgroundColor: getRiskColor(lane.riskScore.status) }}
                      >
                        {lane.riskScore.status.toUpperCase()}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Right Panel - Details & Recommendations */}
        <div className="details-panel">
          {selectedLane ? (
            <div className="lane-details">
              <div className="detail-header">
                <h3>Lane Details</h3>
                <div className="risk-indicator">
                  <div
                    className="risk-dot"
                    style={{ backgroundColor: getRiskColor(selectedLane.riskScore.status) }}
                  />
                  <span>Risk Level: {selectedLane.riskScore.status.toUpperCase()}</span>
                </div>
              </div>

              {/* Risk Breakdown */}
              <div className="risk-breakdown">
                <h4>Risk Breakdown</h4>
                <div className="risk-metrics">
                  <div className="risk-metric">
                    <span>Operational</span>
                    <div className="risk-bar">
                      <div
                        className="risk-fill"
                        style={{
                          width: `${selectedLane.riskScore.breakdown.operational}%`,
                          backgroundColor: getRiskColor(selectedLane.riskScore.breakdown.operational < 40 ? 'green' :
                            selectedLane.riskScore.breakdown.operational < 70 ? 'amber' : 'red')
                        }}
                      />
                      <span>{selectedLane.riskScore.breakdown.operational}</span>
                    </div>
                  </div>
                  <div className="risk-metric">
                    <span>Geopolitical</span>
                    <div className="risk-bar">
                      <div
                        className="risk-fill"
                        style={{
                          width: `${selectedLane.riskScore.breakdown.geopolitical}%`,
                          backgroundColor: getRiskColor(selectedLane.riskScore.breakdown.geopolitical < 40 ? 'green' :
                            selectedLane.riskScore.breakdown.geopolitical < 70 ? 'amber' : 'red')
                        }}
                      />
                      <span>{selectedLane.riskScore.breakdown.geopolitical}</span>
                    </div>
                  </div>
                  <div className="risk-metric">
                    <span>Weather</span>
                    <div className="risk-bar">
                      <div
                        className="risk-fill"
                        style={{
                          width: `${selectedLane.riskScore.breakdown.weather}%`,
                          backgroundColor: getRiskColor(selectedLane.riskScore.breakdown.weather < 40 ? 'green' :
                            selectedLane.riskScore.breakdown.weather < 70 ? 'amber' : 'red')
                        }}
                      />
                      <span>{selectedLane.riskScore.breakdown.weather}</span>
                    </div>
                  </div>
                  <div className="risk-metric">
                    <span>Economic</span>
                    <div className="risk-bar">
                      <div
                        className="risk-fill"
                        style={{
                          width: `${selectedLane.riskScore.breakdown.economic}%`,
                          backgroundColor: getRiskColor(selectedLane.riskScore.breakdown.economic < 40 ? 'green' :
                            selectedLane.riskScore.breakdown.economic < 70 ? 'amber' : 'red')
                        }}
                      />
                      <span>{selectedLane.riskScore.breakdown.economic}</span>
                    </div>
                  </div>
                  <div className="risk-metric">
                    <span>Infrastructure</span>
                    <div className="risk-bar">
                      <div
                        className="risk-fill"
                        style={{
                          width: `${selectedLane.riskScore.breakdown.infrastructure}%`,
                          backgroundColor: getRiskColor(selectedLane.riskScore.breakdown.infrastructure < 40 ? 'green' :
                            selectedLane.riskScore.breakdown.infrastructure < 70 ? 'amber' : 'red')
                        }}
                      />
                      <span>{selectedLane.riskScore.breakdown.infrastructure}</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Recommendations */}
              <div className="recommendations">
                <h4>Recommendations</h4>
                {assessment.recommendations
                  .filter(rec => rec.laneId === selectedLane.id)
                  .map(recommendation => (
                    <div key={recommendation.id} className="recommendation-card">
                      <div className="rec-header">
                        <span className="rec-type">{recommendation.type.replace('_', ' ').toUpperCase()}</span>
                        <span className={`rec-priority ${recommendation.priority}`}>
                          {recommendation.priority.toUpperCase()}
                        </span>
                      </div>
                      <p className="rec-description">{recommendation.description}</p>
                      <div className="rec-impact">
                        <div className="impact-item">
                          <span>Risk ‚Üì</span>
                          <span className="impact-value positive">-{recommendation.impact.riskReduction}</span>
                        </div>
                        <div className="impact-item">
                          <span>Cost</span>
                          <span className={`impact-value ${recommendation.impact.costChange >= 0 ? 'negative' : 'positive'}`}>
                            {recommendation.impact.costChange >= 0 ? '+' : ''}{Math.round(recommendation.impact.costChange * 100)}%
                          </span>
                        </div>
                        <div className="impact-item">
                          <span>Time</span>
                          <span className={`impact-value ${recommendation.impact.timeChange >= 0 ? 'negative' : 'positive'}`}>
                            {recommendation.impact.timeChange >= 0 ? '+' : ''}{Math.round(recommendation.impact.timeChange)}h
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          ) : (
            <div className="no-selection">
              <p>Select a lane to view detailed information</p>
            </div>
          )}
        </div>
      </div>

      {/* Active Disruptions */}
      {assessment.activeDisruptions.length > 0 && (
        <div className="disruptions-panel">
          <h3>Active Disruptions</h3>
          <div className="disruptions-grid">
            {assessment.activeDisruptions.map(disruption => (
              <div key={disruption.id} className="disruption-card">
                <div className="disruption-header">
                  <span className={`disruption-severity ${disruption.severity}`}>
                    {disruption.severity.toUpperCase()}
                  </span>
                  <button
                    className="clear-disruption-btn"
                    onClick={() => clearDisruption(disruption.id)}
                  >
                    Clear
                  </button>
                </div>
                <h4>{disruption.name}</h4>
                <p>Type: {disruption.type.replace('_', ' ')}</p>
                <p>Duration: {disruption.duration}h</p>
                <div className="disruption-impact">
                  <div>Delay: +{disruption.impact.delayHours}h</div>
                  <div>Cost: +{Math.round(disruption.impact.costIncrease * 100)}%</div>
                  <div>Reliability: -{Math.round(disruption.impact.reliabilityDecrease * 100)}%</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Scenario Testing Panel */}
      {showScenarioPanel && (
        <div className="scenario-overlay">
          <div className="scenario-panel">
            <div className="scenario-header">
              <h3>Test Disruption Scenarios</h3>
              <button
                className="close-btn"
                onClick={() => setShowScenarioPanel(false)}
              >
                √ó
              </button>
            </div>

            <div className="scenario-form">
              <div className="form-group">
                <label>Scenario Type</label>
                <select
                  value={scenarioForm.scenarioType}
                  onChange={(e) => setScenarioForm({ ...scenarioForm, scenarioType: e.target.value })}
                >
                  <option value="port_closure">Port Closure</option>
                  <option value="carrier_strike">Carrier Strike</option>
                  <option value="fuel_spike">Fuel Price Spike</option>
                  <option value="weather_event">Weather Event</option>
                  <option value="border_delay">Border Delay</option>
                </select>
              </div>

              <div className="form-group">
                <label>Severity</label>
                <select
                  value={scenarioForm.severity}
                  onChange={(e) => setScenarioForm({ ...scenarioForm, severity: e.target.value })}
                >
                  <option value="low">Low</option>
                  <option value="medium">Medium</option>
                  <option value="high">High</option>
                  <option value="critical">Critical</option>
                </select>
              </div>

              <div className="form-group">
                <label>Affected Lanes (Optional)</label>
                <select
                  multiple
                  value={scenarioForm.affectedLanes || []}
                  onChange={(e) => {
                    const selected = Array.from(e.target.selectedOptions, option => option.value);
                    setScenarioForm({ ...scenarioForm, affectedLanes: selected });
                  }}
                >
                  {assessment.lanes.map(lane => (
                    <option key={lane.id} value={lane.id}>
                      {lane.origin} ‚Üí {lane.destination}
                    </option>
                  ))}
                </select>
                <small>Leave empty to affect first 2 lanes</small>
              </div>

              <div className="scenario-actions">
                <button
                  className="apply-scenario-btn"
                  onClick={applyScenario}
                >
                  Apply Scenario
                </button>
                <button
                  className="cancel-btn"
                  onClick={() => setShowScenarioPanel(false)}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityAssessment;
